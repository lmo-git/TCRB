import streamlit as st
from PIL import Image
import datetime
import gspread
import requests
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload

# ==========================
# üìå Title
# ==========================
st.title("üì¶ ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏û‡∏≤‡πÄ‡∏•‡∏ó‡∏î‡πâ‡∏ß‡∏¢ AI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô TWN")

# ‡πÉ‡∏ä‡πâ session_state ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏≥‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤
if "page" not in st.session_state:
    st.session_state.page = "page1"

# ==========================
# üìÑ PAGE 1: ‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ
# ==========================
if st.session_state.page == "page1":
    st.header("üìÑ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏ö‡∏Ñ‡∏∏‡∏°‡∏û‡∏≤‡πÄ‡∏•‡∏ó")

    ocr_text = st.text_input("‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏Ñ‡∏∏‡∏°‡∏û‡∏≤‡πÄ‡∏•‡∏ó (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà PT) ‡πÄ‡∏ä‡πà‡∏ô 1234")
    doc_image = st.camera_input("‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏ö‡∏Ñ‡∏∏‡∏°‡∏û‡∏≤‡πÄ‡∏•‡∏ó")

    if st.button("‚û°Ô∏è ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡πà‡∏≤‡∏¢‡∏û‡∏≤‡πÄ‡∏•‡∏ó)"):
        if not ocr_text:
            st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏Ñ‡∏∏‡∏°‡∏û‡∏≤‡πÄ‡∏•‡∏ó‡∏Å‡πà‡∏≠‡∏ô")
        elif not doc_image:
            st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ô")
        else:
            st.session_state.ocr_text = ocr_text
            st.session_state.doc_image = doc_image
            st.session_state.page = "page2"
            st.experimental_rerun()

# ==========================
# üì¶ PAGE 2: ‡∏ñ‡πà‡∏≤‡∏¢‡∏û‡∏≤‡πÄ‡∏•‡∏ó + ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö + ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
# ==========================
elif st.session_state.page == "page2":
    st.header("üì¶ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏ï‡∏£‡∏ß‡∏à‡∏ô‡∏±‡∏ö‡∏û‡∏≤‡πÄ‡∏•‡∏ó")

    pallet_image_file = st.camera_input("‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏û‡∏≤‡πÄ‡∏•‡∏ó 1 ‡∏î‡πâ‡∏≤‡∏ô")

    detected_count = 0
    if pallet_image_file:
        temp_image_path = "pallet_temp.jpg"
        image = Image.open(pallet_image_file)
        image.save(temp_image_path)

        try:
            response = requests.post(
                "https://detect.roboflow.com/pallet-detection-measurement/1?api_key=WtsFf6wpMhlX16yRNb6e",
                files={"file": open(temp_image_path, "rb")}
            )
            result = response.json()
            predictions = result.get("predictions", [])
            detected_count = len(predictions)
            st.success(f"üéØ ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÑ‡∏î‡πâ {detected_count} ‡∏û‡∏≤‡πÄ‡∏•‡∏ó")
        except Exception as e:
            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö: {e}")

    pallet_count = st.number_input("‡πÇ‡∏õ‡∏£‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏≤‡πÄ‡∏•‡∏ó", value=detected_count, step=1)

    if st.button("‚¨ÖÔ∏è ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£"):
        st.session_state.page = "page1"
        st.experimental_rerun()

    if st.button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"):
        try:
            scopes = [
                "https://www.googleapis.com/auth/spreadsheets",
                "https://www.googleapis.com/auth/drive"
            ]
            creds = Credentials.from_service_account_info(st.secrets["gcp"], scopes=scopes)
            gc = gspread.authorize(creds)
            sheet = gc.open_by_key("1GR4AH-WFQCA9YGma6g3t0APK8xfMW8DZZkBQAqHWg68").sheet1
            drive_service = build("drive", "v3", credentials=creds)

            folder_name = "Pallet"
            query = f"mimeType='application/vnd.google-apps.folder' and name='{folder_name}' and trashed=false"
            results = drive_service.files().list(q=query, spaces='drive', fields='files(id)').execute()
            if results.get("files"):
                folder_id = results["files"][0]["id"]
            else:
                folder = drive_service.files().create(
                    body={'name': folder_name, 'mimeType': 'application/vnd.google-apps.folder'},
                    fields='id'
                ).execute()
                folder_id = folder['id']

            def upload_image(file_obj, prefix):
                if not file_obj:
                    return "No Image"
                temp_path = f"{prefix}_{datetime.datetime.now().strftime('%Y%m%d%H%M%S')}.jpg"
                Image.open(file_obj).save(temp_path)
                media = MediaFileUpload(temp_path, mimetype='image/jpeg')
                uploaded = drive_service.files().create(
                    body={'name': temp_path, 'parents': [folder_id]},
                    media_body=media,
                    fields='id'
                ).execute()
                return f"https://drive.google.com/file/d/{uploaded['id']}/view?usp=sharing"

            doc_link = upload_image(st.session_state.doc_image, "Document")
            pallet_link = upload_image(pallet_image_file, "Pallet")

            timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            row = [timestamp, st.session_state.ocr_text, detected_count, pallet_count, doc_link, pallet_link]
            sheet.append_row(row)

            st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")


        except Exception as e:
            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: {e}")


